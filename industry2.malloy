
source: sic1 is duckdb.table('./divisions.csv') extend {
    primary_key: DivisionNum
}
/* 
source: sic4 is duckdb.table('./sic-codes.csv') extend {
    --dimension: sic is SIC:::number
    dimension: Division is column0
    dimension: MajorGroup is column1:::number
    dimension: IndustryGroup is column2:::number
    dimension: SIC is column3:::number
    dimension: Description is column4
    primary_key: SIC
}*/
source: sic4 is duckdb.table('./SICcodes.csv') extend {
    --dimension: sic is SIC:::number
    dimension: SECOffice is column1
    dimension: Description is column2
    dimension: SIC is column0--:::number
    dimension: Description_nc is replace(Description,',','.')
    
    primary_key: SIC
}


source: sic3 is duckdb.table('./industry-groups.csv') extend {
    --dimension: industry_group is `Industry Group`:::NUMBER
    --primary_key: industry_group
   -- dimension: Division is column0
    --dimension: MajorGroup is column1:::number
   -- dimension: IndustryGroup is column2:::number
    --dimension: SIC is column3:::number
    --dimension: Description is column3
    primary_key: IndustryGroup
}


source: sic2 is duckdb.table('./major-groups.csv') extend {
    
    --dimension: Division is column0
   -- dimension: MajorGroup is column1:::number
   -- dimension: Description is column2
    primary_key: MajorGroup
}

source: sic_change is duckdb.table('./industry2.malloy 2.csv') extend {
    --primary_key: old_sic
    join_one: sic4 with old_sic
}

run: sic_change -> {
    select: *, sic4.Description
    limit: 10
    where: change_in_sic = "True"
}

run: sic_change -> {
    group_by: old__sic_description is sic4.Description
    aggregate: number_of_co is count()
    --select: *, sic4.Description
    --limit: 10
    where: change_in_sic = "True"
    nest: to_sic is {
        group_by: new_sic_desciption is Description_nc
        aggregate: number_of_co is count()
         nest: by_co is {
        group_by: name_no_comma, fy is fy::string
        --order_by: fy
        --aggregate: number_of_co is count()
    }
    }
   
}



source: sub is duckdb.table('./sub*.parquet') extend {
    dimension: major_code is trunc(sic / 100)
    dimension: industry_code is trunc(sic / 10)
    dimension: division is trunc(sic / 1000)
    dimension: cik_str is cik::string
    join_one: sic4 with sic
    --join_one: sic3 with industry_code
   -- join_one: sic2 with major_code
    join_one: sic1 with division
   -- join_one: auditors with cik_str
    measure: num_companies is count()
    dimension: SIC_f3 is substr(zipba::string,1,3)
    dimension: filed_str is filed::string
    dimension: name_no_comma is replace(name,',','.')
    --measure: num_companies is count()
   -- join_one: auditors with 
    
}

run: sub -> {
    group_by: sic, sic4.Description
    aggregate: num_companies is count(adsh)
    where: form = "10-K" and period = @2018 and sic = null
    nest: by_sic is {
        group_by: name, sic
        limit: 70
    }
}
// industries by year
 -- # bar_chart
run: sub -> {
    group_by: sic, sic4.Description
    aggregate: num_companies is count(adsh)
    where: form = "10-K" and period = @2021 --and sic = null
    -- nest: by_sic is {
    --     group_by: name, sic
    --     limit: 70
    -- }
}

// industries by year -- good one
 -- # bar_chart
run: sub -> {
    group_by: sic4.SIC, sic4.Description
    aggregate: num_companies is count(adsh)
    where: form = "10-K" --and period = @2021 --and sic = null
    # bar_chart
    nest: by_sic is {
        group_by: period.year
        aggregate: num_companies is count(adsh)
        limit: 70
     }
}


// industries by state
 -- # bar_chart
run: sub -> {
    group_by: stprba
    aggregate: num_companies is count(name)
    where: form = "10-K" --and period = @2021 --and sic = null
    # bar_chart
    nest: by_ind is {
        group_by: sic4.Description
        aggregate: num_companies is count(name)
        limit: 8
     }
}

// industries by zip code
 -- # bar_chart
run: sub -> {
    group_by: zipba, stprba
    aggregate: num_companies is count(name)
    where: form = "10-K" --and period = @2021 --and sic = null
    # bar_chart
    nest: by_ind is {
        group_by: sic4.Description
        aggregate: num_companies is count(name)
        limit: 8
     }
}

// industries by first 3 zip
 -- # bar_chart
run: sub -> {
    group_by: sic4.Description
    aggregate: num_companies is count(name)
    where: form = "10-K" and SIC_f3 = '958' or SIC_f3 = '956' or SIC_f3 = '957' or SIC_f3 = '942' or SIC_f3 = '945' --and period = @2021 --and sic = null
    --# bar_chart
    -- nest: by_ind is {
    --     group_by: sic4.Description
    --     aggregate: num_companies is count(name)
    --     limit: 8
    --  }
}

//change sic code
run: sub -> {
    group_by: name, sic, period.year
    --aggregate: num_companies is count(name)
    where: form = "10-K" --and SIC_f3 = '958' or SIC_f3 = '956' or SIC_f3 = '957' or SIC_f3 = '942' or SIC_f3 = '945' --and period = @2021 --and sic = null
    --# bar_chart
    -- nest: by_ind is {
    --     group_by: sic4.Description
    --     aggregate: num_companies is count(name)
    --     limit: 8
    --  }
}

// change in SIC code??
run: sub -> {
  select: adsh, cik, name, sic, mas1, bas1, period.quarter
  calculate: r is row_number() {partition_by: name; order_by: sic}
} -> {
  select: *
  where: r = 1
}

//replicate Josh Alan Lee's code
//change in zip
run: sub -> {
    group_by: cik_str, name_no_comma, filed_str, fy, zipba, sic, sic4.Description_nc
    --limit: 1000
    where: form = "10-K" --| "10-Q"
    calculate: change_in_sic is pick 'True' when sic != lag(sic) {partition_by: name_no_comma; order_by: filed_str} --and cik_str = lag(cik) --when lag(mas1) != mas1 and lag(name) = name
    else 'No Change'
    calculate: old_sic is pick lag(sic) when sic != lag(sic) {partition_by: name_no_comma; order_by: filed_str} --and cik_str = lag(cik) --when lag(mas1) != mas1 and lag(name) = name
    else 1
    --having: change_in_sic = "True"
    -- calculate: change_in_bas is pick 'True' when bas1_nc != lag(bas1_nc) {partition_by: cik_str; order_by: filed_str} --when lag(mas1) != mas1 and lag(name) = name
    -- else 'No Change'
    -- calculate: change_in_zipba is pick 'True' when zipba != lag(zipba) {partition_by: cik_str; order_by: filed_str} --when lag(mas1) != mas1 and lag(name) = name
    -- else 'No Change'
    -- calculate: change_in_zipma is pick 'True' when zipma != lag(zipma) {partition_by: cik_str; order_by: filed_str} --when lag(mas1) != mas1 and lag(name) = name
    -- else 'No Change'
   -- change_found_in_bas1 is pick 'True' when lag(bas1) != bas1 --& adsh = lag(adsh)
    --else 'No Change'
   order_by: name_no_comma, filed_str
--calculate: changed is lag(address) { partition_by: company_name; order_by: something }
} -- -> {
--   --select: *
  
--   group_by: old_sic
--   aggregate: sic_1 is count()
--   where: change_in_sic = "True"
-- }


//replicate Josh Alan Lee's code
//change in zip
run: sub -> {
    group_by: cik_str, name_no_comma, filed_str, fy, zipba, zipma, cityba, cityma, stprba, stprma, stprinc, afs, form, sic, period, sic4.Description_nc
    --limit: 1000
    where: form = "10-K" --| "10-Q"
    calculate: change_in_sic is pick 'True' when sic != lag(sic) {partition_by: name_no_comma; order_by: filed_str} --and cik_str = lag(cik) --when lag(mas1) != mas1 and lag(name) = name
    else 'No Change'
   order_by: name_no_comma, filed_str
--calculate: changed is lag(address) { partition_by: company_name; order_by: something }
} -> {
    select: name_no_comma, Description_nc, change_in_sic, afs, sic, filed_str
    limit: 100
    where: change_in_sic = "True"
   -- measure: name_is is count()

    -- }
}


//replicate Josh Alan Lee's code
//change in zip
run: sub -> {
    group_by: name_no_comma --, filed_str, fy, zipba, zipma, cityba, cityma, stprba, stprma, stprinc, afs, form, sic, period, sic4.Description
    --limit: 1000
    where: form = "10-K" --| "10-Q"
   
   --order_by: name_no_comma, filed_str
   having: count(sic) > 1
   nest: by_stuff is {
    group_by: name_no_comma, period.year, sic, sic4.Description
   }
--calculate: changed is lag(address) { partition_by: company_name; order_by: something }
-- } -> {
--     group_by: by_stuff.name_no_comma --, sic4.Description
}

